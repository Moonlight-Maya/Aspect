
Button = class("Button", $[
	__init = fn(modelPart, x, y, width, height, onClick) {
		this.part = modelPart
		this.x = x
		this.y = y
		this.width = width
		this.height = height
		this.onClick = onClick
		this
	},
	contains = fn(x, y) {
		x >= this.x &&
		y >= this.y &&
		x < this.x + this.width &&
		y < this.y + this.height
	},
	mouseClicked = fn(x, y, button, mods) {
		if (button == 0 && this.contains(x, y))
			this:onClick()
	},
	mouseMoved = fn(x, y) {
		if this.contains(x, y)
			this.hover()
		else
			this.unhover()
	},
	hover = fn() {
		this.part.uv(0, (this.height + 1) / 128)
	},
	unhover = fn() {
		this.part.uv(0, 0)
	},
	pos = fn(x, y) {
		this.x = x
		this.y = y
		this.part.pos(-x, -y, 0)
	}
])

ButtonManager = class("ButtonManager", $[
	__init = fn() {
		this.clearButton = Button(
			models.hud.gui.clearButton,
			0, 0, 16, 16,
			fn() manager.equipAspect(null)
		)
		this.folderButton = Button(
			models.hud.gui.folderButton,
			0, 0, 16, 16,
			fn() 
				if not manager.openAspectsFolder(null)
					print("Failed to open aspect folder - maybe OS doesn't support?")
		)
		this
	},
	onGuiOpen = fn() {
		this.clearButton.pos(CLEAR_BUTTON_X, CLEAR_BUTTON_Y)
		this.folderButton.pos(FOLDER_BUTTON_X, FOLDER_BUTTON_Y)
		thisBound = this
		this.mouseClickFunc = fn(x, y, button, mods) {
			thisBound.clearButton.mouseClicked(x / GUI_SCALE, y / GUI_SCALE, button, mods)
			thisBound.folderButton.mouseClicked(x / GUI_SCALE, y / GUI_SCALE, button, mods)
		}
		this.mouseMoveFunc = fn(x, y) {
			thisBound.clearButton.mouseMoved(x / GUI_SCALE, y / GUI_SCALE)
			thisBound.folderButton.mouseMoved(x / GUI_SCALE, y / GUI_SCALE)
		}
		events.MOUSE_DOWN.add(this.mouseClickFunc)
		events.MOUSE_MOVE.add(this.mouseMoveFunc)
	},
	onGuiClose = fn() {
		events.MOUSE_DOWN.remove(this.mouseClickFunc)
		events.MOUSE_MOVE.remove(this.mouseMoveFunc)
	}
])()

ButtonManager
