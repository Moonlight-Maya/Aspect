Component = class("Component", $[
	__init = fn(string) {
		this.text = "" + string //convert to string
		this.bold = this.italic = this.underlined = this.strikethrough = this.obfuscated = false
		this.color = this.hover = null
		this.extras = ![]
		this.current = this
		this
	},
	__tostring = fn() {
		//If we have color, then set color, otherwise nothing
		colorString = if this.color == null "" else ",\"color\":\"" + this.color + "\""
		//If we have a hover, then set hover, otherwise nothing
		hoverString = if this.hover == null "" else ",\"hoverEvent\":{\"action\":\"show_text\",\"contents\":" + this.hover + "}"
		"{\"text\":\"%s\",\"bold\":%b,\"italic\":%b,\"underlined\":%b,\"strikethrough\":%b,\"obfuscated\":%b%s%s}".format(![
			this.text,
			this.bold,
			this.italic,
			this.underlined,
			this.strikethrough,
			this.obfuscated,
			colorString,
			hoverString
		])
	}
])

JsonText = class("JsonText", $[
	__init = fn(string) {
		this.components = ![Component(string)]
		this.current = this.components[-1]
		this
	},
	bold_0 = fn() {
		this.current.bold = true
		this
	},
	bold_1 = fn(b) {
		this.current.bold = b
		this
	},
	italic_0 = fn() {
		this.current.italic = true
		this
	},
	italic_1 = fn(b) {
		this.current.underline = b
		this
	},
	underlined_0 = fn() {
		this.current.underlined = true
		this
	},
	underlined_1 = fn(b) {
		this.current.underlined = b
		this
	},
	strikethrough_0 = fn() {
		this.current.strikethrough = true
		this
	},
	strikethrough_1 = fn(b) {
		this.current.strikethrough = b
		this
	},
	obfuscated_0 = fn() {
		this.current.obfuscated = true
		this
	},
	obfuscated_1 = fn(b) {
		this.current.obfuscated = b
		this
	},
	color = fn(colorString) {
		this.current.color = colorString
		this
	},
	next = fn(string) {
		this.components.push(Component(string))
		this.current = this.components[-1]
		this
	},
	hover = fn(jsonText) {
		this.current.hover = jsonText
		this
	},
	concat = fn(otherJsonText) {
		thisBound = this
		otherJsonText.components.each(fn(c) thisBound.components.push(c))
		this.current = this.components[-1]
		this
	},
	__tostring = fn() {
		//put them all together with commas
		res = "["
		this.components.each(fn(c) res = res + c + ",")
		//remove ending comma, finish the array
		res.sub(0, -1) + "]"
	}
])

//Return the JsonText class
JsonText
