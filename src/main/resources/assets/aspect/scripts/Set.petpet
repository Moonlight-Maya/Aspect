Set = class("Set", $[
    //Initializers
    __init_0 = fn() {
        this.elems = $[]
        this
    },
    __init_1 = fn(list) {
        this.elems = $[]
        list.each(fn(v) this.elems[v] = true)
        this
    },
    
    //Regular functions, return self for chaining when applicable
    add = fn(elem) {this.elems[elem] = true this},
    del = fn(elem) {this.elems.del(elem) this},
    has = fn(elem) this.elems[elem] or false,
    each = fn(func) {this.elems.eachK(func) this},
    size = fn() this.elems.size(),
    copy = fn() {
        x = Set()
        x.elems = this.elems.copy()
        x
    },

    //Operator overloads

    //Unite 2 sets
    __add_Set = fn(other) {
        s = this.copy()
        other.each(fn(e) s.add(e))
        s
    },

    //Intersect 2 sets
    __mul_Set = fn(other) {
        s = Set()
        this.each(fn(v) if other.has(v) s.add(v))
        s
    },

    //Indexing operator support
    __get = fn(obj) this.has(obj)
])

//Return the set class
Set
